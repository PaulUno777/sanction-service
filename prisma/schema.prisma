// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Sanctioned {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Sanction SanctionList @relation(fields: [listId], references: [id])
  listId   String       @db.ObjectId

  firstName      String?
  middleName     String?
  lastName       String?
  defaultName    String?
  gender         Gender?
  type           SubjectType?
  dateOfBirth    DateOfBith?
  placeOfBirth   PlaceOfBirth?
  title          String?
  remark         String?
  motive         String?
  references     String[]      @default([])
  publicationUrl String?
  listedOn       String?
  listType       String?
  akas           Aka[]

  adresses      Adresse[]
  nationalities Nationality[]
  citizenships  Citizenship[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model PlaceOfBirthList {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
//   sanctionedId String     @db.ObjectId

//   place           String?
//   city            String?
//   stateOrProvince String?
//   postalCode      String?
//   zipCode         String?
//   country         String?
//   mainEntry       Int     @default(1)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

// model DateOfBirthList {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
//   sanctionedId String     @db.ObjectId

//   date      DateOfBith
//   mainEntry Int        @default(1)
//   comment   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

model Nationality {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
  sanctionedId String     @db.ObjectId

  country   String?
  code      String?
  mainEntry Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Citizenship {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
  sanctionedId String     @db.ObjectId

  country   String?
  code      String?
  mainEntry Int?    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model AkaList {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
//   sanctionedId String     @db.ObjectId

//   category    String?
//   type        String?
//   firstName   String?
//   middleName  String?
//   lastName    String?
//   defaultName String?
//   comment     String?
// }

model SanctionList {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name            String
  publicationDate DateTime? @db.Date
  file            String?
  numberOfLine    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  santioned Sanctioned[]
}

enum Gender {
  M
  F
}

type Country {
  isoCode String?
  name String?
}

type DateOfBith {
  day   String?
  month String?
  year  String?
}

type PlaceOfBirth {
  place           String?
  stateOrProvince String?
  postalCode      String?
  zipCode         String?
  country         Country?
}

model Adresse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sanctioned   Sanctioned @relation(fields: [sanctionedId], references: [id], onDelete: NoAction)
  sanctionedId String     @db.ObjectId

  place           String?
  stateOrProvince String?
  postalCode      String?
  zipCode         String?
  country         Country?
}

type SubjectType {
  code  String?
  label String?
}

type Aka {
  type        String?
  firstName   String?
  middleName  String?
  lastName    String?
  defaultName String?
  comment     String?
}
